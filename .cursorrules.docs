# AI Media Analysis System - Dokumentations-Regelwerk
# Status: Alpha 0.4.4 - Development-Ready mit iterativer Entwicklung

## Dokumentations-Philosophie
- **Living Documentation**: Dokumentation als integraler Teil des Codes
- **Single Source of Truth**: Keine redundanten Informationen
- **Automation First**: Automatische Updates wo möglich
- **Review-Required**: Dokumentation im Code-Review prüfen
- **Iterative Updates**: Dokumentation folgt dem 4-Iterations-Modell

## Cursor Rules Integration

### Aktive Regelwerke
- `.cursorrules/rules/formatting.md`: Code-Formatierung
- `.cursorrules/rules/iterative_development.md`: **Iterative Entwicklung (PROJEKTREGEL)**
- `.cursorrules.docs`: Dokumentations-Standards
- `.cursorrules.vps`: VPS-Deployment
- `.cursorrules.cloud`: Cloud-Integration

### Iterative Dokumentation (NEUE REGEL)
**Alle Dokumentations-Updates folgen dem 4-Iterations-Modell:**

#### Iteration 1: Core-Dokumentation
- `PROJECT_STATE.md`: Service-Status aktualisieren
- `docker-compose.yml`: Service-Konfigurationen
- Health-Check-Dokumentation

#### Iteration 2: Integration-Dokumentation
- `API.md`: Neue Service-Endpoints
- Service-spezifische READMEs
- Inter-Service-Communication

#### Iteration 3: Feature-Dokumentation
- Advanced-Feature-Guides
- Configuration-Templates
- Performance-Optimierungen

#### Iteration 4: User-Dokumentation
- Production-Deployment-Guides
- User-Interface-Dokumentation
- Export-Funktionen

## Dokumentations-Standards
- **Docstring-Format**: Google Style mit Type Hints
- **Markdown**: Für alle README und Dokumentationsdateien
- **Versionierung**: SemVer (MAJOR.MINOR.PATCH)
- **Changelog**: Automatische Updates bei Änderungen

## Projekt-Dokumentation

### Core-Dokumente
- `README.md`: Projekt-Übersicht und Quick-Start
- `CHANGELOG.md`: Änderungshistorie und Release-Notes
- `STATUS.md`: Aktueller Projekt-Status
- `LASTENHEFT.md`: Projektanforderungen und Ziele
- `ROADMAP.md`: Zukünftige Entwicklung und Features
- `CONTRIBUTING.md`: Beitrags-Richtlinien
- `LICENSE.md`: Lizenzinformationen

### Architektur-Dokumente
- `ARCHITECTURE.md`: System-Architektur und Design
- `API.md`: API-Dokumentation und Endpoints
- `DEVELOPMENT.md`: Entwicklungs-Workflow
- `DEPLOYMENT.md`: Deployment-Guide
- `SECURITY.md`: Sicherheitsrichtlinien
- `PERFORMANCE.md`: Performance-Metriken und Benchmarks

### Service-Dokumente
- `services/{service_name}/README.md`: Service-spezifische Dokumentation
- `services/{service_name}/API.md`: Service-API-Dokumentation
- `services/{service_name}/CHANGELOG.md`: Service-Changelog

### Development-Dokumente
- `docs/development/`: Development-Guides
- `docs/testing/`: Testing-Strategien
- `docs/deployment/`: Deployment-Prozesse
- `docs/monitoring/`: Monitoring und Logging

## GitHub Release-Prozess

### Release-Vorbereitung
1. **Version Bump**:
   ```bash
   # Version in pyproject.toml aktualisieren
   make version-bump
   ```

2. **Changelog Update**:
   ```bash
   # Changelog generieren
   make update-changelog
   ```

3. **Dokumentation Update**:
   ```bash
   # Alle Dokumente aktualisieren
   make update-docs
   ```

### Release-Checklist
- [ ] Version in `pyproject.toml` aktualisiert
- [ ] `CHANGELOG.md` aktualisiert
- [ ] Alle Tests erfolgreich
- [ ] Dokumentation aktuell
- [ ] Release-Notes vorbereitet
- [ ] GitHub Release erstellt

### GitHub Release Template
```markdown
## Version {version}

### Neue Features
- Feature 1
- Feature 2

### Verbesserungen
- Verbesserung 1
- Verbesserung 2

### Bugfixes
- Fix 1
- Fix 2

### Breaking Changes
- Breaking Change 1
- Breaking Change 2

### Dokumentation
- [API-Dokumentation](link)
- [Changelog](link)
- [Deployment-Guide](link)

### Installation
```bash
# Installation
pip install ai-media-analysis=={version}
```

### Migration
```python
# Migration von v{old_version} zu v{version}
# Migrationsschritte hier
```
```

## Service-Dokumentation
```python
def process_data(data: str) -> dict:
    """Verarbeitet die Eingabedaten und gibt das Ergebnis zurück.

    Args:
        data (str): Die zu verarbeitenden Daten im JSON-Format

    Returns:
        dict: Verarbeitetes Ergebnis mit Status und Metadaten

    Raises:
        ValueError: Bei ungültigem Datenformat
        ProcessingError: Bei Verarbeitungsfehlern
    """
    pass
```

## Dokumentations-Workflow
1. **Code-Änderungen**:
   ```bash
   # 1. Code ändern
   # 2. Docstrings aktualisieren
   # 3. Tests schreiben/aktualisieren
   # 4. README aktualisieren
   make format
   make test
   ```

2. **Service-Änderungen**:
   ```bash
   # 1. Service-Code ändern
   # 2. API-Dokumentation aktualisieren
   # 3. Changelog aktualisieren
   # 4. Status-Dokumentation aktualisieren
   make update-docs
   ```

3. **Architektur-Änderungen**:
   ```bash
   # 1. Architektur-Änderungen implementieren
   # 2. ARCHITECTURE.md aktualisieren
   # 3. DEPLOYMENT.md aktualisieren
   # 4. Version bumpen
   make version-bump
   ```

## Dokumentations-Templates

### Service README Template
```markdown
# {Service Name}

## Beschreibung
Kurze Beschreibung des Service-Zwecks und der Hauptfunktionalität.

## API Endpoints
- `GET /health`: Health Check
- `POST /process`: Hauptverarbeitungsendpoint
- ...

## Konfiguration
- `REDIS_URL`: Redis Connection String
- `API_KEY`: Service API Key
- ...

## Entwicklung
```bash
# Setup
make dev-setup

# Tests
make test

# Start
make quick-start
```

## Monitoring
- Health Check: `/health`
- Metrics: `/metrics`
- Logs: `docker logs {service_name}`
```

### Changelog Entry Template
```markdown
## [Unreleased]
### Added
- Neue Feature Beschreibung

### Changed
- Änderungen an bestehenden Features

### Fixed
- Bugfix Beschreibungen

### Removed
- Entfernte Features/Funktionalitäten
```

## Dokumentations-Qualitätskontrolle
- **Pre-commit Hook**: Prüft Docstring-Format
- **CI/CD**: Validiert Markdown-Syntax
- **Review**: Dokumentation im Code-Review prüfen
- **Versioning**: Automatische Changelog-Generierung

## Dokumentations-Best-Practices
1. **Aktualität**: Dokumentation immer aktuell halten
2. **Klarheit**: Klare, präzise Formulierungen
3. **Beispiele**: Code-Beispiele für komplexe Features
4. **Struktur**: Konsistente Formatierung
5. **Links**: Querverweise zwischen Dokumenten
6. **Versioning**: Dokumentation mit Code versionieren
7. **Review**: Dokumentation im Code-Review prüfen
