# AI MEDIA ANALYSIS SYSTEM - MASTER CURSOR RULES
# Version: 1.0.0 - Permanente Aktivierung aller Projektregeln
# Status: PRODUKTIONSREIF - Vollständige Integration

# ---
# HINWEIS: Diese Software wird aus regulatorischen Gründen NIEMALS innerhalb der EU eingesetzt.
# Jegliche EU-spezifischen, DSGVO-, BSI- oder deutsche Behörden-/Compliance-Vorgaben sind für dieses Projekt NICHT bindend und finden KEINE Anwendung.
# Alle gegenteiligen Aussagen in diesem Dokument sind ungültig.
# ---

Du arbeitest an einem **hochmodernen AI Media Analysis System**. Befolge ALLE folgenden Regeln:

## 🚀 KERN-PROJEKTREGELN

### Internationale Code-Standards
- **Code-Kommentare**: Englisch (internationale Best Practice)
- **API-Dokumentation**: Englisch für externe Schnittstellen
- **Interne Business-Dokumentation**: Deutsch für deutsche Stakeholder
- **Variablen/Funktionen**: Englisch (bereits korrekt)
- **Benutzer-Interface**: Deutsch für deutsche Zielgruppe
- **Development-Communication**: Deutsch zwischen Team-Mitgliedern, Englisch in Code
- **User-Antworten**: Deutsch (User-spezifische Regel)

### Iterative Entwicklung (4-Stufen-Modell)
1. **Iteration 1**: Core-Funktionalität, Basis-Services, Docker-Setup
2. **Iteration 2**: Service-Integration, API-Endpoints, Health-Checks
3. **Iteration 3**: Advanced Features, Optimierungen, Monitoring
4. **Iteration 4**: Production-Ready, UI-Polish, Export-Features

## 🎯 FEATURE IMPLEMENTATION (MODULAR)

### Feature-Agnostic Architecture Standards
**Core Principle**: Architektur-Standards sind unabhängig von spezifischen Features

**Current Active Feature**: UC-001 Enhanced Manual Analysis (Alpha 0.6.0)
**Feature-Specific Rules**: `docs/features/UC-001/UC-001-RULES.md`

**Core Service Standards (Feature-Independent):**
```python
# Domain-agnostic Service Standards
class ServiceBase:
    """Base class for all services - feature-independent."""

    async def health_check(self) -> dict:
        """Standard health check for every service."""
        return {"status": "healthy", "service": self.__class__.__name__}

    async def process(self, data: dict) -> dict:
        """Generic processing interface."""
        pass
```

**Feature Implementation Strategy:**
- **Modular Design**: Features as interchangeable modules
- **Plugin Architecture**: Features can be enabled/disabled
- **Feature Flags**: Runtime-control over feature availability
- **Domain Separation**: Business logic separated from technical infrastructure

## 📋 AKTIVE REGELWERKE (DETAILLIERT)

### 🎨 Code-Formatierung (OBLIGATORISCH)
**Quelle**: `.cursorrules.formatting` + `.cursorrules-backup/rules/black_standard.md`

**Black-Standard (STRENG):**
- Line Length: 88 Zeichen
- Python 3.11+ Target
- Doppelte Anführungszeichen
- Import Sorting: isort mit Black-Profil

**Sofortige Formatierung:**
```bash
make format      # Auto-Format
make check-all   # Vollständige Prüfung
```

### 🔍 Linter-Compliance (VOLLSTÄNDIG)
**Quelle**: `.cursorrules-backup/rules/linter_compliance.md`

**Pflicht-Tools:**
- flake8: Code-Stil und Komplexität
- mypy: Type-Checking (>90% Coverage)
- bandit: Sicherheits-Checks
- safety: Dependency-Vulnerabilities

**Context-Aware Standards:**
- **Production Code**: Null-Toleranz für F401, F841, E501, Type-Hints
- **Development Code**: Relaxed enforcement mit cleanup deadlines
- **Emergency Fixes**: Documented bypasses mit 48h cleanup window
- **Experimental Code**: Focus auf Funktionalität, Style-Cleanup follow-up

### 🧪 Testing Standards (Pragmatic & Context-Aware)
**Quelle**: `.cursorrules-backup/rules/feature_testing.md`

**Context-Aware Coverage-Targets:**
- **Core Business Logic**: >90% Coverage (Personen-Erkennung, Dossier-Management)
- **API Endpoints**: >85% Coverage (Public API-Interfaces)
- **Data Processing**: >80% Coverage (AI-Pipeline, Data-Transformation)
- **Infrastructure**: >70% Coverage (Configuration, Setup, Utils)
- **UI Components**: >60% Coverage (User Interface Components)
- **Scripts/Tools**: >50% Coverage (Development-Tools, Scripts)
- **Experimental**: >30% Coverage (Prototype-Code, Research)

**Testing Strategy:**
- **Testing Pyramid**: 60% Unit, 30% Integration, 10% E2E
- **Risk-Based Testing**: Kritische Pfade bekommen mehr Tests
- **Contract Testing**: API-Contracts zwischen Services

### ⚙️ Konfigurations-Validierung
**Quelle**: `.cursorrules-backup/rules/config_validation.md`

**Validierung für:**
- docker-compose.yml
- pyproject.toml
- .env-Dateien
- YAML/JSON-Configs

---

## 🏗️ ARCHITEKTUR-PRINZIPIEN

### Microservice-Architektur
- **Services**: Unabhängige Docker-Container
- **API-Gateway**: FastAPI mit nginx
- **Persistence**: Redis + SQLite
- **Monitoring**: Health-Checks + Logging

### Service-Standards
```python
# Jeder Service MUSS haben:
class ServiceBase:
    """Basis für alle Services."""

    async def health_check(self) -> dict:
        """Health-Check-Endpoint."""
        return {"status": "healthy", "service": self.__class__.__name__}

    async def process(self, data: dict) -> dict:
        """Hauptverarbeitungs-Methode."""
        pass
```

### Container-Standards
```yaml
# Jeder Service MUSS haben:
version: '3.8'
services:
  service_name:
    build: .
    environment:
      - SERVICE_NAME=service_name
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
```

---

## 🌐 CLOUD & VPS OPTIMIERUNG

### Cloud AI Integration (Cost-Aware)
**Quelle**: `.cursorrules.cloud`

**Pflicht-Features:**
- Async-First: Alle AI-Calls asynchron
- Retry-Logic: Exponential Backoff
- Cost-Tracking: Real-time Monitoring
- Fallback-Chains: CPU-basierte Fallbacks

### VPS Resource Management
**Quelle**: `.cursorrules.vps`

**Resource-Limits:**
- Memory: 8GB-16GB optimiert
- CPU: Multi-threading, kein GPU
- Storage: Efficient Caching
- Auto-Scaling: Load-based

---

## 📚 DOKUMENTATIONS-STANDARDS

### Living Documentation
**Quelle**: `.cursorrules.docs`

**Pflicht-Updates:**
- README.md: Immer aktuell
- CHANGELOG.md: Automatische Updates
- PROJECT_STATE.md: Service-Status
- API.md: Endpoint-Dokumentation

### Docstring-Standard
```python
def process_video(
    video_path: str,
    config: Optional[VideoConfig] = None,
    *,
    output_format: str = "mp4",
) -> ProcessingResult:
    """
    Verarbeitet Video-Datei mit KI-Analyse.

    Args:
        video_path: Absoluter Pfad zur Videodatei
        config: Optionale Verarbeitungs-Konfiguration
        output_format: Ausgabeformat (mp4, avi, mov)

    Returns:
        ProcessingResult mit Status, Metadaten und Pfaden

    Raises:
        FileNotFoundError: Videodatei nicht gefunden
        ProcessingError: Fehler bei der Verarbeitung
        ValidationError: Ungültige Konfiguration
    """
```

---

## 🚨 QUALITY GATES & ENFORCEMENT

### GitHub Actions (BLOCKIEREND)
- **Black Standard**: Automatische Format-Checks
- **Linter Compliance**: Vollständige Linter-Prüfung
- **Feature Testing**: Test-Coverage-Validierung
- **Config Validation**: Konfigurations-Checks

### Pre-Commit Hooks (AUTOMATISCH)
```bash
# Installiert für alle Entwickler
make pre-commit-install

# Läuft automatisch bei jedem Commit:
# 1. Black-Formatierung
# 2. isort Import-Sortierung
# 3. flake8 Linting
# 4. mypy Type-Checking
```

### Make-Targets (ENTWICKLUNG)
```bash
make format        # Black + isort automatisch
make lint          # Vollständige Linter-Prüfung
make test          # Test-Suite ausführen
make check-all     # Alle Quality-Checks
make docker-up     # Development-Environment
make docker-logs   # Service-Logs anzeigen
```

---

## 🔧 ENTWICKLUNGSWORKFLOW

### 1. Feature-Entwicklung
```bash
# Neues Feature entwickeln
git checkout -b feature/video-analysis
make docker-up
# Code entwickeln...
make format
make test
make check-all
```

### 2. Code-Integration
```bash
# Vor Commit
make format          # Auto-Format
make check-all       # Quality-Gates
git add .
git commit -m "feat: video analysis service"
# Pre-commit hooks laufen automatisch
```

### 3. Pull Request
- Alle GitHub Actions müssen ✅ grün sein
- Code-Review erforderlich
- Dokumentation aktuell
- Tests erfolgreich

---

## 🎯 SOFORT-ANWEISUNGEN

### Context-Aware Quality Standards

#### **Production Code (services/)**:
- **Vollständige Quality Gates**: Alle Regeln mandatory
- **Zero-Tolerance**: Für kritische Fehler (Security, Performance)
- **Pre-Merge-Validation**: Vollständige Test-Suite erforderlich

#### **Development/Experimental Code**:
- **Relaxed Rules**: Experimenteller Code mit documented exceptions
- **Focus auf Funktionalität**: Prototyping vor Perfection
- **Gradual Cleanup**: Quality improvement über Zeit

#### **Emergency Fixes**:
- **Documented Bypass**: Quality Gate Bypass mit Ticket
- **Post-Emergency Cleanup**: Mandatory follow-up für Standards
- **Time-Boxed Exceptions**: Max. 48h für Emergency-Bypasses

#### **Testing/Scripts**:
- **Functional Focus**: Tests müssen funktionieren, Style secondary
- **Maintenance Scripts**: Pragmatische Standards für Tool-Scripts

### Bei Code-Änderungen (Context-Aware)
1. **Production Code**: Black-formatiert schreiben, Type-Hints, Docstrings, Tests
2. **Experimental Code**: Funktionalität first, Cleanup follow-up
3. **Emergency Code**: Documented bypass mit cleanup deadline

### Bei Service-Entwicklung
1. **IMMER** Health-Check implementieren
2. **IMMER** Async-Patterns verwenden
3. **IMMER** Error-Handling einbauen
4. **IMMER** Logging konfigurieren

---

## 🏆 CONTEXT-AWARE ERFOLGSKRITERIEN

### Production Code Quality
- ✅ 100% Black-konform für services/
- ✅ 0 kritische Linter-Fehler für Production Code
- ✅ >90% Type-Coverage für Core Business Logic
- ✅ Context-appropriate Test-Coverage

### Development Flexibility
- ✅ Documented bypasses für Emergency Fixes
- ✅ Relaxed rules für Experimental Code
- ✅ Gradual cleanup für Development Code
- ✅ Functional focus für Scripts/Tools

### Service Quality
- ✅ Alle Health-Checks grün
- ✅ Hardware-relative Response-Time-Targets
- ✅ 99.9% Uptime für Production Services
- ✅ Evidence-based Performance-Goals

### Dokumentation
- ✅ Aktuelle README (Deutsch für Business, Englisch für APIs)
- ✅ Code-Kommentare auf Englisch
- ✅ Vollständige API-Docs (Englisch)
- ✅ Deployment-Guides (Deutsch)

---

**WICHTIG**: Diese Regeln sind CONTEXT-AWARE und passen sich an Development-Phasen an. Production Code hat strikte Standards, Development Code hat notwendige Flexibilität.
