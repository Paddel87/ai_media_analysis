[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-media-analysis"
version = "0.1.0"
description = "AI Media Analysis System - VPS-native Content Moderation Platform"
authors = [
    {name = "AI Media Analysis Team", email = "team@aimediaanalysis.com"}
]
readme = "README.md"
license = {text = "MIT"}
# Empfohlene Python-Version: 3.11+
requires-python = ">=3.11"
keywords = ["ai", "media", "analysis", "video", "audio", "image", "processing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Sound/Audio",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "redis>=5.0.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "aiofiles>=23.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "pytest-mock>=3.11.0",
]

[project.urls]
Homepage = "https://github.com/ai-media-analysis/ai-media-analysis"
Repository = "https://github.com/ai-media-analysis/ai-media-analysis"
Documentation = "https://docs.aimediaanalysis.com"
Changelog = "https://github.com/ai-media-analysis/ai-media-analysis/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["services*", "tests*"]
exclude = ["docs*", "scripts*"]

# =============================================================================
# BLACK CONFIGURATION - Strenger Code-Standard
# =============================================================================
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Verzeichnisse die ausgeschlossen werden
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  # Spezifische Dateien
  | migrations/
)/
'''

# =============================================================================
# ISORT CONFIGURATION - Import-Sortierung (Black-kompatibel)
# =============================================================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["services", "tests", "scripts"]

# =============================================================================
# PYTEST CONFIGURATION - Test-Framework
# =============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--maxfail=5",
]
markers = [
    "unit: Unit tests - fast, isolated tests",
    "integration: Integration tests - tests service interactions",
    "e2e: End-to-end tests - full workflow tests",
    "slow: Slow-running tests (>30 seconds)",
    "performance: Performance and load tests",
    "smoke: Smoke tests - quick health checks",
    "security: Security-related tests",
    "api: API endpoint tests",
    "database: Database-related tests",
    "redis: Redis-related tests",
    "llm: LLM service tests",
    "video: Video processing tests",
    "embedding: Embedding service tests",
    "control: Control service tests",
    "job: Job manager tests",
]
minversion = "7.0"
timeout = 300

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================
[tool.coverage.run]
source = ["services"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/settings/*",
    "*/conftest.py",
    "*/test_*.py",
    "*/*_test.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# =============================================================================
# MYPY CONFIGURATION - Type Checking
# =============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "torch.*",
    "cv2.*",
    "PIL.*",
    "numpy.*",
    "pandas.*",
]
ignore_missing_imports = true
