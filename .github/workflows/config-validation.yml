name: Configuration Validation
on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-config:
    name: Validate Configuration Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install validation tools
        run: |
          python -m pip install --upgrade pip
          pip install tomli pyyaml

      - name: Validate pytest.ini
        id: pytest-check
        run: |
          echo "🧪 Validating pytest.ini..."
          if ! python -c "import configparser; c=configparser.ConfigParser(); c.read('pytest.ini')"; then
            echo "pytest_failed=true" >> $GITHUB_OUTPUT
            echo "❌ pytest.ini syntax check failed"
          else
            echo "pytest_failed=false" >> $GITHUB_OUTPUT
            echo "✅ pytest.ini syntax check passed"
          fi

      - name: Check for duplicate keys in pytest.ini
        id: pytest-duplicates
        run: |
          echo "🔍 Checking for duplicate keys in pytest.ini..."
          python scripts/validate_config.py --file pytest || echo "duplicate_check_failed=true" >> $GITHUB_OUTPUT

      - name: Validate pyproject.toml
        id: pyproject-check
        run: |
          echo "📦 Validating pyproject.toml..."
          if ! python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"; then
            echo "pyproject_failed=true" >> $GITHUB_OUTPUT
            echo "❌ pyproject.toml syntax check failed"
          else
            echo "pyproject_failed=false" >> $GITHUB_OUTPUT
            echo "✅ pyproject.toml syntax check passed"
          fi

      - name: Validate docker-compose.yml
        id: docker-compose-check
        run: |
          echo "🐳 Validating docker-compose.yml..."
          if ! docker-compose config --quiet; then
            echo "docker_compose_failed=true" >> $GITHUB_OUTPUT
            echo "❌ docker-compose.yml validation failed"
          else
            echo "docker_compose_failed=false" >> $GITHUB_OUTPUT
            echo "✅ docker-compose.yml validation passed"
          fi

      - name: Full configuration validation
        id: full-validation
        run: |
          echo "🔍 Running full configuration validation..."
          python scripts/validate_config.py --comprehensive

      - name: Generate validation report
        if: failure()
        run: |
          echo "📊 Generating validation report..."
          echo "# 🔧 Configuration Validation Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.pytest-check.outputs.pytest_failed }}" == "true" ]; then
            echo "## ❌ pytest.ini Issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "pytest.ini hat Syntax-Fehler oder Duplikate." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.pyproject-check.outputs.pyproject_failed }}" == "true" ]; then
            echo "## ❌ pyproject.toml Issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "pyproject.toml hat Syntax-Fehler." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.docker-compose-check.outputs.docker_compose_failed }}" == "true" ]; then
            echo "## ❌ docker-compose.yml Issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "docker-compose.yml hat Syntax-Fehler oder Service-Duplikate." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## 🔧 How to Fix" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following commands to fix configuration issues:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Validate all configuration files" >> $GITHUB_STEP_SUMMARY
          echo "python scripts/validate_config.py" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Fix duplicates automatically (where possible)" >> $GITHUB_STEP_SUMMARY
          echo "python scripts/validate_config.py --fix" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check specific files:" >> $GITHUB_STEP_SUMMARY
          echo "python scripts/validate_config.py --file pytest" >> $GITHUB_STEP_SUMMARY
          echo "python scripts/validate_config.py --file pyproject" >> $GITHUB_STEP_SUMMARY
          echo "python scripts/validate_config.py --file docker-compose" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Validate specific syntax:" >> $GITHUB_STEP_SUMMARY
          echo "python -c \"import configparser; c=configparser.ConfigParser(); c.read('pytest.ini')\"" >> $GITHUB_STEP_SUMMARY
          echo "python -c \"import tomli; tomli.load(open('pyproject.toml', 'rb'))\"" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose config --quiet" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Success report
        if: success()
        run: |
          echo "# ✅ Configuration Validation Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 All configuration files are valid!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **pytest.ini**: No syntax errors or duplicates" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **pyproject.toml**: Valid TOML syntax" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **docker-compose.yml**: Valid YAML syntax, no duplicate services" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Makefile**: No duplicate targets" >> $GITHUB_STEP_SUMMARY

      - name: Fail if validation issues found
        if: failure()
        run: |
          echo "❌ Configuration validation failed!"
          echo "🔧 Run 'python scripts/validate_config.py --fix' to auto-repair"
          echo "📋 See the step summary above for detailed configuration issues"
          exit 1

  config-consistency:
    name: Configuration Consistency Check
    runs-on: ubuntu-latest
    needs: validate-config

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install tools
        run: |
          pip install tomli

      - name: Check consistency across files
        run: |
          echo "# 📊 Configuration Consistency Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check Python version consistency
          echo "## Python Version Consistency" >> $GITHUB_STEP_SUMMARY

          # Extract Python version from pyproject.toml
          PYPROJECT_PYTHON=$(python -c "import tomli; data=tomli.load(open('pyproject.toml', 'rb')); print(data['project']['requires-python']) if 'project' in data and 'requires-python' in data['project'] else 'Not specified'")
          echo "- **pyproject.toml**: $PYPROJECT_PYTHON" >> $GITHUB_STEP_SUMMARY

          # Check if docker-compose specifies Python version
          if grep -q "python:" docker-compose.yml; then
            DOCKER_PYTHON=$(grep "python:" docker-compose.yml | head -1 | sed 's/.*python://' | sed 's/-.*//')
            echo "- **docker-compose.yml**: $DOCKER_PYTHON" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **docker-compose.yml**: Not specified" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Configuration Files Summary" >> $GITHUB_STEP_SUMMARY

          # Count configuration files
          CONFIG_FILES=$(find . -maxdepth 2 -name "*.ini" -o -name "*.toml" -o -name "*.yml" -o -name "*.yaml" -o -name "Makefile" | wc -l)
          echo "- **Total configuration files**: $CONFIG_FILES" >> $GITHUB_STEP_SUMMARY

          echo "- **pytest.ini**: $([ -f pytest.ini ] && echo "✅ Present" || echo "❌ Missing")" >> $GITHUB_STEP_SUMMARY
          echo "- **pyproject.toml**: $([ -f pyproject.toml ] && echo "✅ Present" || echo "❌ Missing")" >> $GITHUB_STEP_SUMMARY
          echo "- **docker-compose.yml**: $([ -f docker-compose.yml ] && echo "✅ Present" || echo "❌ Missing")" >> $GITHUB_STEP_SUMMARY
          echo "- **Makefile**: $([ -f Makefile ] && echo "✅ Present" || echo "❌ Missing")" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Konfigurationsdatei-Validierung Regel: Keine Duplikate, gültige Syntax, Konsistenz zwischen Dateien*" >> $GITHUB_STEP_SUMMARY
