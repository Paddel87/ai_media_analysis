name: Black Code Standard Check
on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'

jobs:
  black-standard-check:
    name: Black Code Standard Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-black-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-black-

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black==24.2.0 isort==5.13.2

      - name: Check Black formatting
        id: black-check
        run: |
          echo "🔍 Checking Black formatting..."
          if ! python -m black --check --diff services/ tests/ scripts/; then
            echo "black_failed=true" >> $GITHUB_OUTPUT
            echo "❌ Black formatting check failed"
          else
            echo "black_failed=false" >> $GITHUB_OUTPUT
            echo "✅ Black formatting check passed"
          fi

      - name: Check import sorting
        id: isort-check
        run: |
          echo "🔍 Checking import sorting..."
          if ! python -m isort --check-only --diff services/ tests/ scripts/ --profile black; then
            echo "isort_failed=true" >> $GITHUB_OUTPUT
            echo "❌ Import sorting check failed"
          else
            echo "isort_failed=false" >> $GITHUB_OUTPUT
            echo "✅ Import sorting check passed"
          fi

      - name: Generate formatting report
        if: steps.black-check.outputs.black_failed == 'true' || steps.isort-check.outputs.isort_failed == 'true'
        run: |
          echo "📊 Generating formatting report..."
          echo "# 🎨 Black Code Standard Violations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.black-check.outputs.black_failed }}" == "true" ]; then
            echo "## ❌ Black Formatting Issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
            python -m black --check --diff services/ tests/ scripts/ >> $GITHUB_STEP_SUMMARY 2>&1 || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.isort-check.outputs.isort_failed }}" == "true" ]; then
            echo "## ❌ Import Sorting Issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
            python -m isort --check-only --diff services/ tests/ scripts/ --profile black >> $GITHUB_STEP_SUMMARY 2>&1 || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## 🔧 How to Fix" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following commands to fix formatting issues:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Fix all formatting issues automatically" >> $GITHUB_STEP_SUMMARY
          echo "make format" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or fix individually:" >> $GITHUB_STEP_SUMMARY
          echo "python -m black services/ tests/ scripts/" >> $GITHUB_STEP_SUMMARY
          echo "python -m isort services/ tests/ scripts/ --profile black" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Then commit and push:" >> $GITHUB_STEP_SUMMARY
          echo "git add ." >> $GITHUB_STEP_SUMMARY
          echo "git commit -m \"Code automatisch formatiert (Black-Standard)\"" >> $GITHUB_STEP_SUMMARY
          echo "git push" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Success report
        if: steps.black-check.outputs.black_failed == 'false' && steps.isort-check.outputs.isort_failed == 'false'
        run: |
          echo "# ✅ Black Code Standard Compliance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 All Python files comply with the Black code standard!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Black formatting**: All files properly formatted" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Import sorting**: All imports properly sorted" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Line length**: All lines ≤ 88 characters" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **String quotes**: Consistent double quotes" >> $GITHUB_STEP_SUMMARY

      - name: Fail if formatting issues found
        if: steps.black-check.outputs.black_failed == 'true' || steps.isort-check.outputs.isort_failed == 'true'
        run: |
          echo "❌ Code formatting does not comply with Black standard!"
          echo "🔧 Run 'make format' to fix formatting issues automatically"
          echo "📋 See the step summary above for detailed formatting violations"
          exit 1

  black-standard-stats:
    name: Black Standard Statistics
    runs-on: ubuntu-latest
    needs: black-standard-check
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install tools
        run: |
          pip install black isort

      - name: Generate statistics
        run: |
          echo "# 📊 Black Standard Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count Python files
          TOTAL_PY_FILES=$(find services/ tests/ scripts/ -name "*.py" | wc -l)
          echo "- **Total Python files**: $TOTAL_PY_FILES" >> $GITHUB_STEP_SUMMARY

          # Check compliance
          BLACK_COMPLIANT=$(python -m black --check services/ tests/ scripts/ --quiet && echo "✅ 100%" || echo "❌ Issues found")
          ISORT_COMPLIANT=$(python -m isort --check-only services/ tests/ scripts/ --quiet && echo "✅ 100%" || echo "❌ Issues found")

          echo "- **Black compliance**: $BLACK_COMPLIANT" >> $GITHUB_STEP_SUMMARY
          echo "- **Import sorting**: $ISORT_COMPLIANT" >> $GITHUB_STEP_SUMMARY

          # Line length stats
          echo "- **Max line length**: 88 characters (Black standard)" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Python version**: 3.11+" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Black Standard Regel: Alle Python-Dateien müssen dem strengen Black-Standard entsprechen*" >> $GITHUB_STEP_SUMMARY
