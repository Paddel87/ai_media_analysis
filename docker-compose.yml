version: '3.8'

services:
  data-persistence:
    build:
      context: .
      dockerfile: setup/Dockerfile.persistence
    volumes:
      - ./data:/app/data
    environment:
      - CONFIG_PATH=/app/config/persistence_config.json
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "python", "-c", "import os; assert os.path.exists('/app/data')"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  pose_estimation:
    build: ./services/pose_estimation
    container_name: ai_pose_estimation
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./data/results:/app/results
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ocr_detection:
    build: ./services/ocr_detection
    container_name: ai_ocr_detection
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./data/results:/app/results
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  clip_nsfw:
    build: ./services/clip_nsfw
    container_name: ai_clip_nsfw
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./data/results:/app/results
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  face_reid:
    build: ./services/face_reid
    container_name: ai_face_reid
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./data/results:/app/results
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  whisper_transcriber:
    build: ./services/whisper_transcriber
    container_name: ai_whisper_transcriber
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./data/results:/app/results
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  whisper-transcriber:
    build: 
      context: ./services/whisper_transcriber
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./services/whisper_transcriber/models:/app/models
    environment:
      - PYTHONUNBUFFERED=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  vector-db:
    build:
      context: ./services/vector_db
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    depends_on:
      - qdrant

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_ALLOW_CORS=true

  llm-service:
    build:
      context: ./services/llm_service
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    depends_on:
      - vector-db
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  ai_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  data:
    driver: local
  qdrant_data:
    